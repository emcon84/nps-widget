// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // For credentials auth
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  surveys       Survey[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// NPS Survey models
model Survey {
  id          String    @id @default(cuid())
  title       String
  description String?
  userId      String
  elements    Json      // FormElement[]
  settings    Json      // FormSettings
  style       Json      // FormStyle
  isActive    Boolean   @default(true)
  version     Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses   Response[]
  
  @@index([userId])
  @@index([isActive])
}

model Response {
  id        String   @id @default(cuid())
  surveyId  String
  data      Json     // Survey response data
  userAgent String?
  pageUrl   String?
  ipAddress String?
  createdAt DateTime @default(now())
  
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  
  @@index([surveyId])
  @@index([createdAt])
}
